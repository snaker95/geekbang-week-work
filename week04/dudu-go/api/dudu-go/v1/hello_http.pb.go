// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0-rc3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type HelloHTTPServer interface {
	GetHello(context.Context, *GetHelloReq) (*GetHelloResp, error)
	SayHello(context.Context, *HelloReq) (*HelloResp, error)
}

func RegisterHelloHTTPServer(s *http.Server, srv HelloHTTPServer) {
	r := s.Route("/")
	r.GET("/{name}", _Hello_GetHello0_HTTP_Handler(srv))
	r.GET("/hello/{name}", _Hello_SayHello0_HTTP_Handler(srv))
}

func _Hello_GetHello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHelloReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/hello.v1.Hello/GetHello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHello(ctx, req.(*GetHelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHelloResp)
		return ctx.Result(200, reply)
	}
}

func _Hello_SayHello0_HTTP_Handler(srv HelloHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/hello.v1.Hello/SayHello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResp)
		return ctx.Result(200, reply)
	}
}

type HelloHTTPClient interface {
	GetHello(ctx context.Context, req *GetHelloReq, opts ...http.CallOption) (rsp *GetHelloResp, err error)
	SayHello(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloResp, err error)
}

type HelloHTTPClientImpl struct {
	cc *http.Client
}

func NewHelloHTTPClient(client *http.Client) HelloHTTPClient {
	return &HelloHTTPClientImpl{client}
}

func (c *HelloHTTPClientImpl) GetHello(ctx context.Context, in *GetHelloReq, opts ...http.CallOption) (*GetHelloResp, error) {
	var out GetHelloResp
	path := binding.EncodeURL("/{name}", in, true)
	opts = append(opts, http.Operation("/hello.v1.Hello/GetHello"))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HelloHTTPClientImpl) SayHello(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloResp, error) {
	var out HelloResp
	path := binding.EncodeURL("/hello/{name}", in, true)
	opts = append(opts, http.Operation("/hello.v1.Hello/SayHello"))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
